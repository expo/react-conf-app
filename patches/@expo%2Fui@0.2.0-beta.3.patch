diff --git a/ios/HostView.swift b/ios/HostView.swift
index cda337c85897bec2d41a5fb9b85b36bfeb9be5cc..aea5549cfbd08bd658197eba05b1d3d6d8d8a2a7 100644
--- a/ios/HostView.swift
+++ b/ios/HostView.swift
@@ -20,6 +20,8 @@ internal enum ExpoColorScheme: String, Enumerable {
 internal final class HostViewProps: ExpoSwiftUI.ViewProps {
   @Field var useViewportSizeMeasurement: Bool = false
   @Field var colorScheme: ExpoColorScheme?
+  @Field var matchContentsHorizontal = false
+  @Field var matchContentsVertical = false
   var onLayoutContent = EventDispatcher()
 }
 
@@ -128,8 +130,15 @@ private struct ViewportSizeMeasurementLayout: Layout {
  */
 private struct GeometryChangeModifier: ViewModifier {
   let props: HostViewProps
+  @EnvironmentObject var shadowNodeProxy: ExpoSwiftUI.ShadowNodeProxy
 
   private func dispatchOnLayoutContent(_ size: CGSize) {
+    if (props.matchContentsHorizontal || props.matchContentsVertical) {
+      let styleWidth = props.matchContentsHorizontal ? NSNumber(value: Float(size.width)) : nil
+      let styleHeight = props.matchContentsVertical ? NSNumber(value: Float(size.height)) : nil
+      shadowNodeProxy.setStyleSize?(styleWidth, styleHeight)
+    }
+    
     props.onLayoutContent([
       "width": size.width,
       "height": size.height
diff --git a/src/swift-ui/Host/index.tsx b/src/swift-ui/Host/index.tsx
index 1798af6452e290bdfad9fed1b9f4bb4a85066fdd..c6fd3de32ebc72ee6a73a3cb477d030e3906222a 100644
--- a/src/swift-ui/Host/index.tsx
+++ b/src/swift-ui/Host/index.tsx
@@ -1,13 +1,13 @@
-import { requireNativeView } from 'expo';
-import { useState } from 'react';
-import { StyleProp, ViewStyle, type ColorSchemeName } from 'react-native';
+import { requireNativeView } from "expo";
+import { StyleProp, ViewStyle, type ColorSchemeName } from "react-native";
 
-import { createViewModifierEventListener } from '../modifiers/utils';
-import { type CommonViewModifierProps } from '../types';
+import { createViewModifierEventListener } from "../modifiers/utils";
+import { type CommonViewModifierProps } from "../types";
 
 export type HostProps = {
   /**
    * When true, the host view will update its size in the React Native view tree to match the content's layout from SwiftUI.
+   * Can be only set once on mount.
    * @default false
    */
   matchContents?: boolean | { vertical?: boolean; horizontal?: boolean };
@@ -23,7 +23,9 @@ export type HostProps = {
    * Callback function that is triggered when the SwiftUI content completes its layout.
    * Provides the current dimensions of the content, which may change as the content updates.
    */
-  onLayoutContent?: (event: { nativeEvent: { width: number; height: number } }) => void;
+  onLayoutContent?: (event: {
+    nativeEvent: { width: number; height: number };
+  }) => void;
 
   /**
    * The color scheme of the host view.
@@ -34,37 +36,34 @@ export type HostProps = {
   style?: StyleProp<ViewStyle>;
 } & CommonViewModifierProps;
 
-const HostNativeView: React.ComponentType<HostProps> = requireNativeView('ExpoUI', 'HostView');
+const HostNativeView: React.ComponentType<
+  HostProps & {
+    matchContentsVertical?: boolean;
+    matchContentsHorizontal?: boolean;
+  }
+> = requireNativeView("ExpoUI", "HostView");
 
 /**
  * A hosting component for SwiftUI views.
  */
 export function Host(props: HostProps) {
-  const { matchContents, onLayoutContent, style, modifiers, ...restProps } = props;
-  const [containerStyle, setContainerStyle] = useState<ViewStyle | null>(null);
+  const { matchContents, onLayoutContent, modifiers, ...restProps } = props;
 
   return (
     <HostNativeView
       modifiers={modifiers}
       {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}
-      style={[style, containerStyle]}
-      onLayoutContent={(e) => {
-        onLayoutContent?.(e);
-        if (matchContents) {
-          const matchVertical =
-            typeof matchContents === 'object' ? matchContents.vertical : matchContents;
-          const matchHorizontal =
-            typeof matchContents === 'object' ? matchContents.horizontal : matchContents;
-          const newContainerStyle: ViewStyle = {};
-          if (matchVertical) {
-            newContainerStyle.height = e.nativeEvent.height;
-          }
-          if (matchHorizontal) {
-            newContainerStyle.width = e.nativeEvent.width;
-          }
-          setContainerStyle(newContainerStyle);
-        }
-      }}
+      matchContentsVertical={
+        typeof matchContents === "object"
+          ? matchContents.vertical
+          : matchContents
+      }
+      matchContentsHorizontal={
+        typeof matchContents === "object"
+          ? matchContents.horizontal
+          : matchContents
+      }
+      onLayoutContent={onLayoutContent}
       {...restProps}
     />
   );
