diff --git a/ReactCommon/react/renderer/core/ConcreteState.h b/ReactCommon/react/renderer/core/ConcreteState.h
index f0eb03a8666939d58527d8d81e8b29ec91c17403..a8dc5e36c73014bec201b1eb901787ac0aabfa3e 100644
--- a/ReactCommon/react/renderer/core/ConcreteState.h
+++ b/ReactCommon/react/renderer/core/ConcreteState.h
@@ -74,10 +74,10 @@ class ConcreteState : public State {
    * function for cases where a new value of data does not depend on an old
    * value.
    */
-  void updateState(Data&& newData) const {
+  void updateState(Data&& newData, bool flushSync = false) const {
     updateState([data{std::move(newData)}](const Data& oldData) -> SharedData {
       return std::make_shared<const Data>(data);
-    });
+    }, flushSync);
   }
 
   /*
@@ -89,7 +89,7 @@ class ConcreteState : public State {
    * return `nullptr`.
    */
   void updateState(
-      std::function<StateData::Shared(const Data& oldData)> callback) const {
+      std::function<StateData::Shared(const Data& oldData)> callback, bool flushSync = false) const {
     auto family = family_.lock();
 
     if (!family) {
@@ -104,7 +104,7 @@ class ConcreteState : public State {
           return callback(*static_cast<const Data*>(oldData.get()));
         }};
 
-    family->dispatchRawState(std::move(stateUpdate));
+    family->dispatchRawState(std::move(stateUpdate), flushSync);
   }
 
 #if defined(RN_SERIALIZABLE_STATE)
diff --git a/ReactCommon/react/renderer/core/EventDispatcher.cpp b/ReactCommon/react/renderer/core/EventDispatcher.cpp
index 8d5476b2137b68af19b8f26e1618814f16cffe99..e0a824e581a8fce847df0d26589a711b00575e84 100644
--- a/ReactCommon/react/renderer/core/EventDispatcher.cpp
+++ b/ReactCommon/react/renderer/core/EventDispatcher.cpp
@@ -41,8 +41,8 @@ void EventDispatcher::experimental_flushSync() const {
   eventQueue_.experimental_flushSync();
 }
 
-void EventDispatcher::dispatchStateUpdate(StateUpdate&& stateUpdate) const {
-  eventQueue_.enqueueStateUpdate(std::move(stateUpdate));
+void EventDispatcher::dispatchStateUpdate(StateUpdate&& stateUpdate, bool flushSync) const {
+  eventQueue_.enqueueStateUpdate(std::move(stateUpdate), flushSync);
 }
 
 void EventDispatcher::dispatchUniqueEvent(RawEvent&& rawEvent) const {
diff --git a/ReactCommon/react/renderer/core/EventDispatcher.h b/ReactCommon/react/renderer/core/EventDispatcher.h
index c103e48982282128f5f5a981493426bae2a304e7..f2867fa1955c7d034fe9ada3c406fd598832154e 100644
--- a/ReactCommon/react/renderer/core/EventDispatcher.h
+++ b/ReactCommon/react/renderer/core/EventDispatcher.h
@@ -56,7 +56,7 @@ class EventDispatcher {
   /*
    * Dispatches a state update with given priority.
    */
-  void dispatchStateUpdate(StateUpdate&& stateUpdate) const;
+  void dispatchStateUpdate(StateUpdate&& stateUpdate, bool flushSync) const;
 
 #pragma mark - Event listeners
   /*
diff --git a/ReactCommon/react/renderer/core/EventQueue.cpp b/ReactCommon/react/renderer/core/EventQueue.cpp
index a83c805287c4d75e636058a3b5a11708a2940f35..5bc0991cf97315458f5540c0178fe0c5622140af 100644
--- a/ReactCommon/react/renderer/core/EventQueue.cpp
+++ b/ReactCommon/react/renderer/core/EventQueue.cpp
@@ -65,7 +65,7 @@ void EventQueue::enqueueUniqueEvent(RawEvent&& rawEvent) const {
   enqueueEvent(std::move(rawEvent));
 }
 
-void EventQueue::enqueueStateUpdate(StateUpdate&& stateUpdate) const {
+void EventQueue::enqueueStateUpdate(StateUpdate&& stateUpdate, bool flushSync) const {
   {
     std::scoped_lock lock(queueMutex_);
     if (!stateUpdateQueue_.empty()) {
@@ -77,7 +77,11 @@ void EventQueue::enqueueStateUpdate(StateUpdate&& stateUpdate) const {
     stateUpdateQueue_.push_back(std::move(stateUpdate));
   }
 
-  onEnqueue();
+  if (flushSync) {
+    flushStateUpdates();
+  } else {
+    onEnqueue();
+  }
 }
 
 void EventQueue::onEnqueue() const {
diff --git a/ReactCommon/react/renderer/core/EventQueue.h b/ReactCommon/react/renderer/core/EventQueue.h
index 74525c6971a3a4be4f5ec3df335c777f929fefe7..f66b5345c7d8ee67abfe5d449b614321dc2d5493 100644
--- a/ReactCommon/react/renderer/core/EventQueue.h
+++ b/ReactCommon/react/renderer/core/EventQueue.h
@@ -46,7 +46,7 @@ class EventQueue {
    * Enqueues and (probably later) dispatch a given state update.
    * Can be called on any thread.
    */
-  void enqueueStateUpdate(StateUpdate&& stateUpdate) const;
+  void enqueueStateUpdate(StateUpdate&& stateUpdate, bool flushSync) const;
 
   /*
    * Experimental API exposed to support EventEmitter::experimental_flushSync.
diff --git a/ReactCommon/react/renderer/core/ShadowNodeFamily.cpp b/ReactCommon/react/renderer/core/ShadowNodeFamily.cpp
index bf486802ccabc4f039c80f726da57488d0c9d36e..e99e27dd8b16251eafabffba540988ec7509bedf 100644
--- a/ReactCommon/react/renderer/core/ShadowNodeFamily.cpp
+++ b/ReactCommon/react/renderer/core/ShadowNodeFamily.cpp
@@ -173,13 +173,13 @@ std::shared_ptr<const State> ShadowNodeFamily::getMostRecentStateIfObsolete(
   return mostRecentState_;
 }
 
-void ShadowNodeFamily::dispatchRawState(StateUpdate&& stateUpdate) const {
+void ShadowNodeFamily::dispatchRawState(StateUpdate&& stateUpdate, bool flushSync) const {
   auto eventDispatcher = eventDispatcher_.lock();
   if (!eventDispatcher) {
     return;
   }
 
-  eventDispatcher->dispatchStateUpdate(std::move(stateUpdate));
+  eventDispatcher->dispatchStateUpdate(std::move(stateUpdate), flushSync);
 }
 
 } // namespace facebook::react
diff --git a/ReactCommon/react/renderer/core/ShadowNodeFamily.h b/ReactCommon/react/renderer/core/ShadowNodeFamily.h
index 838560895287555db717f615e39f156d0eca41c7..afaf066af80ed91d6eaac1fdce458190e30d0cdc 100644
--- a/ReactCommon/react/renderer/core/ShadowNodeFamily.h
+++ b/ReactCommon/react/renderer/core/ShadowNodeFamily.h
@@ -108,7 +108,7 @@ class ShadowNodeFamily final : public jsi::NativeState {
   /*
    * Dispatches a state update with given priority.
    */
-  void dispatchRawState(StateUpdate&& stateUpdate) const;
+  void dispatchRawState(StateUpdate&& stateUpdate, bool flushSync) const;
 
   /*
    * Holds currently applied native props. `nullptr` if setNativeProps API is